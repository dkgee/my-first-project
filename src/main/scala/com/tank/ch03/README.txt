3.1 使用类型参数化数组(Array)
	      Scala的数组是通过索引值加圆括号进行访问。
	      数组引用对象不能被重新赋值成别的数组；它永远指向初始化时指定的那个Array[String]实例。但是Array[String]的
	  内部元素始终能被修改，因此数组本身是可变的。
	      方法若只有一个参数，调用的时候就可以省略点及括号。
      3.2 第八步 使用列表（List）
	      方法没有副作用是函数式风格编程的重要理念，计算并返回值应该是方法唯一的目的。这样做的好处就是降低方法之间的耦合性，因此更加可靠和易于重用。
	      Scala的scala.List不同于java的java.util.List,一旦创建就不可改变。
	      使用":::"方法实现两个列表叠加功能
	      "::",发音"cons"，它可以把新元素组合到现有列表的最前端，然后返回作为执行结果的新列表。
	      如果方法使用操作符来标注，如a * b，那么左操作数是方法调用者，可以改写为a.*(b),除非方法名以冒号结尾，这种情况下，方法被右操作符调用。例如
	      1::twoThree里，::方法的调用者是twoThree,1是方法的传入参数，可以改写为twoThree.::(1)。
 	      Nil是空列表的简写。
      3.3 第九步 使用元组(Tuple)
	      与列表一样，元组也是不可变的；但与列表不同，元组可以包含不同类型的元素。
	      元组实例化后，可以用点号、下划线和基于1的索引访问其中的元素。
	      元组的实际类型取决于它含有的元素数量和这些元素的类型。
      3.4 第十步 使用集(set)和映射(map)
	      scala致力于充分利用函数式和指令式风格两方面的好处。它的集合库可分为可变类型和不可变类型。
      3.5 第十一步 学习识别函数式风格
              指令式的语言环境，例如Java、C++、C#
	      函数式语言环境，例如Haskell、OCamel、Erlang
	      识别函数是否有副作用的地方就在于其结果类型是否为Unit。
	      每个有用的程序都会有某种形式的副作用，否则就不可能向程序之外提供什么有价值的东西。
	      不管是var还是副作用都不是天生邪恶的。
	      Scala不是只能使用函数式风格编程的纯函数式语言，它是这两种语言的混合体。
	      嵩尚val，不可变对象和没有副作用的方法。
	      首相想到它们，只有在特定需要和并加以权衡以后才选择var、可变对象和有副作用的方法。
      3.6 第十二步 从文件里读取文本行