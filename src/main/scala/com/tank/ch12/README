
第12章 特质(trait)
    1，特质是Scala里代码复用的基础单元。其封装了方法和字段的定义，并可以通过混入到类中重用他们。
    2，类可以混入任意多个特质
    3，特质常用的场景方式：拓宽瘦接口为胖接口、定义可堆叠的改变
    4，特质的定义除了使用关键字trait之外，与类定义无异。
    5，一旦特质被定义了，就可以使用extends或with关键字，把它混入类中。
    6，直接在伴生对象中输入main即可生成运行的代码
    7，从特质继承的方法可以向从超类继承的方法那样使用。
    8，特质也是类型
    9，如果想把特质混入显式扩展超类的类里，可以用extends指明待扩展的超类，用with混入特质。如果需要混入多个特质，都加在with子句里就可以了。
    10，在特质中实现一次方法，可以在混入它的类中使用。
    11，Ordered特质：解决操作符问题，用于实现通过某种比较排序的类场景。
    12，特质为类提供可堆叠的改变：相当于拓展类的方法
    13，特质里的super调用是动态绑定的
    14，特质的方法可以使用abstract override关键字声明。当方法被声明后，意味着特质必须被混入某个具有期待方法的具体定义的类中
    15，特质里面可以混入类，一旦特质混入了类，可以称其为一个混入(mixin)
    16，线性化：当使用new实例化一个类的时候，Scala把这个类和所有它继承的类还有它的特质以线性(linear)的次序放在一起。其中一个类中调用super,
        被调用的方法就是方法链的下一节。除了最后一个调用super之外的方法，其净结果就是可堆叠的行为。
    17，使用特质可以始终保持选择的可能性(何时使用抽象类，何时使用特质？)
    18，一个特质持有的并非一个完全的概念，只是一个概念的片段，通过设计的深入来合成更加完善概念

    总结：